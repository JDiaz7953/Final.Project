var points = 0;
var currentScene = 1;
var wormX = 205;
var wormY = 41;
var pelletX = 129;
var pelletY = 144;
var wormTail = 0;
var direction = "S";
var drawbitmoji=function(x,y,bitmojiSize){

noStroke();
//face
fill(227, 209, 184);
rect(x-(8*bitmojiSize/150), y+(48*bitmojiSize/150), bitmojiSize/150*19,bitmojiSize/150*10);//neck
fill(227, 209, 184);
ellipse(x+32*bitmojiSize/150,y,bitmojiSize/150*20,bitmojiSize/150*44);//right ear
ellipse(x-32*bitmojiSize/150,y,bitmojiSize/150*20,bitmojiSize/150*44);//left ear
ellipse(x,y,bitmojiSize/150*65,bitmojiSize/150*100);//face
noStroke();
fill(10, 10, 10);
ellipse(x+(39*bitmojiSize/150),y-(32*bitmojiSize/150),bitmojiSize/150*30,bitmojiSize/150*22);//hair
ellipse(x+(33*bitmojiSize/150),y-(46*bitmojiSize/150),bitmojiSize/150*30,bitmojiSize/150*22);//hair
ellipse(x+(19*bitmojiSize/150),y-(55*bitmojiSize/150),bitmojiSize/150*30,bitmojiSize/150*22);//hair
ellipse(x-(6*bitmojiSize/150),y-(57*bitmojiSize/150),bitmojiSize/150*30,bitmojiSize/150*22);//hair
ellipse(x-(24*bitmojiSize/150),(y-51*bitmojiSize/150),bitmojiSize/150*30,bitmojiSize/150*22);//hair
ellipse(x-(33*bitmojiSize/150),y-(43*bitmojiSize/150),bitmojiSize/150*30,bitmojiSize/150*22);//hair
ellipse(x-(38*bitmojiSize/150),y-(33*bitmojiSize/150),bitmojiSize/150*30,bitmojiSize/150*22);//hair
ellipse(x-(14*bitmojiSize/150),y-(15*bitmojiSize/150),bitmojiSize/150*14,bitmojiSize/150*12);//left eye
ellipse(x+(17*bitmojiSize/150),y-(16*bitmojiSize/150),bitmojiSize/150*14,bitmojiSize/150*12);//right eye
stroke(18, 17, 17);
line(x+3*bitmojiSize/150, y-25*bitmojiSize/150, x+25*bitmojiSize/150, y-25*bitmojiSize/150);//right eyebrow
line(x-24*bitmojiSize/150, y-25*bitmojiSize/150, x-5*bitmojiSize/150, y-25*bitmojiSize/150);// left eyebrow 
fill(224, 146, 146);
arc(x+6*bitmojiSize/150,y+30*bitmojiSize/150,bitmojiSize/150*45,bitmojiSize/150*-9,198,329);//lips 
fill(227, 209, 184);

bezier(x,y, x+21*bitmojiSize/150, y+21*bitmojiSize/150, x-6*bitmojiSize/150, y+20*bitmojiSize/150, x-4*bitmojiSize/150, y+15*bitmojiSize/150);//nose

//body
fill(3, 3, 3);
quad(x-32*bitmojiSize/150, y+145*bitmojiSize/150, x+53*bitmojiSize/150, y+144*bitmojiSize/150, x+21*bitmojiSize/150, y+58*bitmojiSize/150, x-14*bitmojiSize/150, y+58*bitmojiSize/150);//body/tshirt
fill(255, 251, 0);
arc(x+6*bitmojiSize/150,y+60*bitmojiSize/150,bitmojiSize/150*45,bitmojiSize/150*-9,188,339);//gold chain
textSize(bitmojiSize/150*24);
fill(245, 245, 245);
text("JD", x-6*bitmojiSize/150, y+95*bitmojiSize/150);



};

// Contructor for our button
 var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 127;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
    this.color = config.color || color(42, 143, 30);

 };
Button.prototype.Changecolor = function(newColor){
this.color = newColor; 


};
// Draws our button
Button.prototype.draw = function() {
    fill(this.color);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(19);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};
// A function that creates the hit box for our button
Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};
// The start Button and it's properties 
var startButton = new Button({
    x: 139,
    y: 218,
    label: "Start!",
    onClick: function() {
     currentScene = 2;
    }

});


// Function to draw our worm
var worm = function(){
    fill(50, 102, 88);
    rectMode(CENTER);
    rect(wormX, wormY, 10, 10);
   
};

//Function that draws the pellet the worm eats 
var pellet = function(){
    fill(255, 255, 255);
    rectMode(CENTER);
    rect( pelletX, pelletY ,5 ,5);
   
};


//level Design

var gameScreen = function() {
    background(51, 255, 0);
    drawbitmoji(371,24,27);
    fill(41, 191, 11);
    rect(-11, 184, 34, 418);
    rect(157, -18, 473, 48);
    rect(274, 570, 566, 354);
    rect(424 , 71, 62, 757);   
   fill(0, 0, 0);
   textSize(20);
   text("score: " + points , 11 , 22);
   
//Worm character/ways to make it move
  pellet();
  worm();

if (keyIsPressed && keyCode === DOWN) {
    direction =   "S";
    
}
else if (keyIsPressed && keyCode === UP) {
      direction = "N";
}

else if(keyIsPressed && keyCode === LEFT){
       direction = "W";
}
else if(keyIsPressed && keyCode === RIGHT){
       direction = "E";
}

if( direction === "S"){
    wormY++;
}
else if( direction === "N"){
    wormY--;
}
else if( direction === "W"){
    wormX--;
}
else if( direction === "E"){
    wormX++;
}

// Pellet/Points
if((wormX >= pelletX && wormX <= pelletX +10) && (wormY >= pelletY && 
   wormY <= pelletY +10)){
    points+=5;
    pelletX = random(11 , 385);
    pelletY = random(11 , 385);
    wormTail++;

   }
//Makes The worm stay within the play screen 
 wormX = constrain(wormX , 11 , 387);
 wormY = constrain(wormY , 11 , 387);

//This makes the worm tail grows
for( var i = 1; i <= wormTail; i++){
    switch(direction){
        case "N" :
            rect(wormX, wormY + i * 10, 10, 10);
            break;
        case "S":
                rect(wormX, wormY - i * 10, 10, 10);
            break;
        case "E" :
             rect(wormX -( i*10) , wormY, 10, 11);
           break;
        case "W" :
             rect(wormX +i*10, wormY, 10, 11);     
        
    }
}
 
keyPressed = function(){
  if(keyCode === UP && direction !== "S"){
     direction = "N";
 }else if(keyCode === DOWN && direction  !== "N"){
     direction = "S";
 }else if(keyCode === LEFT && direction  !== "E"){
     direction = "W";
 }else if(keyCode === RIGHT && direction !== "W"){
     direction = "E";
     
 
 }

//if the snail collide with the out of bounds the game ends and player is sent back to the splash screen
if((wormX <=  12 || wormX >= 385) || (wormY <= 13 || wormY >= 387)){
    wormTail = 0;
    points = 0;
    wormX = 205;
    wormY = 41;
    currentScene = 1;
  
}else if(points === 50){
    currentScene = 3;
}

};
};


};
};

// Our starting screen
var splash = function (){
    
    fill(0, 255, 47);
    rect(0, 0, 808, 807);
    fill(97, 179, 97);
    textSize(19);
    fill(5, 74, 9);
    text("Author : Jaiden Diaz", 9, 18);
    drawbitmoji(371,36,65);
    textSize(13);
    fill(22, 54, 10);
    text("Welcome to snake,",134,55);
    text("Direction:",25,70);
    text("Use the arrow keys to control the snake",80,91);
    text("Get the snake to eat the apple to gain 5 points",80,105);
    text("Gain 50 points to WIN!",80,119);
    text("BEAWARE OF THE WALLS! unless you feel like starting over",31,133);
    textSize(19);
    text("Enjoy!!", 169 ,146);
    startButton.draw();
 

};
var youWin = function(){

    fill(0, 255, 47);
    rect(0, 0, 808, 807);
    fill(97, 179, 97);
    textSize(19);
    fill(5, 74, 9);
    text(" Author: Jaiden Diaz", 9, 18);
    drawbitmoji(371,36,65);
    fill(22, 54, 10);
    textSize(24);
    text("YOU WIN",134,88);
    textSize(17);
    text("Congratulations:",40,114);
    textSize(17);
    text("You were able to collect 50 points",40,133);
    text("Press Restart & see if you can do it again!!",40,150);
  
    
};

//controls what can be seen on the screen (Splash screen or Gamescreen)
draw = function(){
    if( currentScene === 1){
       splash();  
  }
    if( currentScene === 2){
       gameScreen();
   
  }
    if(currentScene === 3){
      youWin();
  }

};

//allows our button to function
mouseClicked = function() {
    if(currentScene === 1){
      startButton.handleMouseClick();
    }

  };
